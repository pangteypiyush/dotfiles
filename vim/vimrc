"{{{ Core
set encoding=utf-8
set laststatus=2
set nocompatible
"set clipboard=unnamedplus

set colorcolumn=80
set termguicolors

set tabstop=4
set shiftwidth=4
set sts=4
set smarttab
set autoindent

set showmatch
set splitbelow
set showcmd
set ruler
set cursorline

set incsearch
set hlsearch
set ignorecase
set smartcase

set noswapfile
set nobackup
set nowritebackup
set autoread
"allow buffer change even if changes were made
set hidden

set completeopt=longest,menuone,preview,noselect
filetype indent on
filetype plugin on
syntax enable

set foldcolumn=0
"set foldlevelstart=1
set foldmethod=syntax
set nofoldenable
au Syntax * normal zR

set mouse=a

"Toggle <PASTE> mode
set pastetoggle=<F2>
"}}}

"{{{ Misc
"{{{ Insert timestamp
nnoremap <F5> "=strftime("%c")<CR>P
"}}}
"{{{ Clear last search string
nnoremap <leader>cl :let @/=""<cr>
"}}}
"{{{ Fix for lxterminal(nvim)
set guicursor=
"}}}
"}}}

"{{{ Netrw Explorer (Prefer NERDTree)
let g:netrw_banner = 0
let g:netrw_browse_split = 3
let g:netrw_hide = 1
let g:netrw_winsize = 20
"map <c-w>o :Vexplore ~<cr>
"map <c-w>p :Vexplore<cr>
"}}}

"{{{ Hybrid Line numbering
set number relativenumber
augroup numbertoggle
	au!
	au BufEnter,FocusGained,InsertLeave * set relativenumber
	au BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END
"}}}

"{{{ Vundle
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
"{{{ Core Plugins
Plugin 'VundleVim/Vundle.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'bling/vim-bufferline'
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-fugitive'
Plugin 'majutsushi/tagbar'
Plugin 'scrooloose/nerdtree'

" VCS
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'vim-scripts/git_patch_tags.vim'
Plugin 'kablamo/vim-git-log'

" Indent
" Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'Yggdroot/indentLine'

Plugin 'qpkorr/vim-bufkill'
Plugin 'tpope/vim-surround'

" Autoclose
" Plugin 'jiangmiao/auto-pairs'
Plugin 'cohama/lexima.vim'

" Comment
Plugin 'pangteypiyush/EnhCommentify.vim'

" Colorscheme
Plugin 'morhetz/gruvbox'
"}}}
"{{{ Extra Plugins
" Completion
Plugin 'Shougo/deoplete.nvim'

" Lint and  Fix
Plugin 'w0rp/ale'

" Misc
Plugin 'junegunn/vim-easy-align'
Plugin 'easymotion/vim-easymotion'
Plugin 'vimwiki/vimwiki'
Plugin 'junegunn/fzf.vim'
Plugin 'mhinz/vim-startify'
Plugin 'ryanoasis/vim-devicons'
Plugin 'terryma/vim-multiple-cursors'
" Plugin 'luochen1990/rainbow'

" Snippets
Plugin 'Shougo/neosnippet.vim'
Plugin 'honza/vim-snippets'

" Whitespace
Plugin 'ntpeters/vim-better-whitespace'

" Project management
" Plugin 'Workspace-Manager'
"}}}
"{{{ PHP
" Documentation
Plugin 'tobyS/vmustache'
Plugin 'tobyS/pdv'

" Filetype
Plugin 'StanAngeloff/php.vim'
" Plugin 'rayburgemeestre/phpfolding.vim'

" Completion
Plugin 'lvht/phpcd.vim'
"}}}
"{{{ Go
Plugin 'fatih/vim-go'
"}}}
"{{{ Python
" Completion
Plugin 'deoplete-plugins/deoplete-jedi'
"}}}
"{{{ Vim
" Completion
Plugin 'Shougo/neco-vim'
"}}}
"{{{ Terraform
" Filetype
Plugin 'hashivim/vim-terraform'
"}}}
"{{{ YAML
" Filetype
Plugin 'stephpy/vim-yaml'
"}}}
"{{{ CSS LESS
" Filetype
Plugin 'groenewege/vim-less'
Plugin 'hail2u/vim-css3-syntax'
"}}}
call vundle#end()
"}}}

"{{{ Colorscheme
let g:gruvbox_contrast_dark='hard'
colorscheme gruvbox
"}}}

"{{{ Airline
let g:airline_powerline_fonts=1
let g:airline_theme='gruvbox'
let g:airline#extensions#tagbar#enabled=1
let g:airline#extensions#branch#enabled=1
let g:airline#extensions#hunks#enabled=1
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#show_buffers=1
let g:airline#extensions#bufferline#enabled=1
let g:airline#extensions#whitespace#enabled=1
" let g:airline#extensions#whitespace#enabled=0
if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_left_alt_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.maxlinenr = ''
"}}}

"{{{ GitGutter
"Alway show signcolumn
"set signcolumn=yes
" Effects single line :map results output
" Unset events for gitgutter from ~/.vim/after/plugin/gitgutter.vim
" and use buffer write for recalculating hunks
" set updatetime=500

"Reload hunks on buffer write
au BufWritePost * GitGutter

nmap <leader>hs <Plug>(GitGutterStageHunk)
nmap <leader>hr <Plug>(GitGutterUndoHunk)
nmap <leader>hv <Plug>(GitGutterPreviewHunk)
nmap <leader>hn <Plug>(GitGutterNextHunk)
nmap <leader>hp <Plug>(GitGutterPrevHunk)
"}}}

"{{{ floating window
" vim.reaper floating window functions with clear colorcolumn
function! CreateCenteredFloatingWindow()
	let width = float2nr(&columns * 0.9)
	let height = float2nr(&lines * 0.6)
	let top = ((&lines - height) / 2) - 1
	let left = (&columns - width) / 2
	let opts = {'relative': 'editor', 'row': top, 'col': left, 'width': width, 'height': height, 'style': 'minimal'}

	" Frame
	let top = "╭" . repeat("─", width - 2) . "╮"
	let mid = "│" . repeat(" ", width - 2) . "│"
	let bot = "╰" . repeat("─", width - 2) . "╯"
	let lines = [top] + repeat([mid], height - 2) + [bot]
	let s:buf = nvim_create_buf(v:false, v:true)
	call nvim_buf_set_lines(s:buf, 0, -1, v:true, lines)
	let win = nvim_open_win(s:buf, v:true, opts)
	call setwinvar(win, '&colorcolumn', '')

	" Viewport
	set winhl=Normal:Floating
	let opts.row += 1
	let opts.height -= 2
	let opts.col += 2
	let opts.width -= 4
	call nvim_open_win(nvim_create_buf(v:false, v:true), v:true, opts)
	autocmd BufWipeout <buffer> exe 'bwipeout '.s:buf
endfunction

function! ToggleTerm(cmd)
	if empty(bufname(a:cmd))
		call CreateCenteredFloatingWindow()
		call termopen(a:cmd, { 'on_exit': function('OnTermExit') })
	else
		bwipeout!
	endif
endfunction

" When term starts, auto go into insert mode
autocmd TermOpen * startinsert

" Turn off line numbers etc
autocmd TermOpen * setlocal listchars= nonumber norelativenumber

function! OnTermExit(job_id, code, event) dict
	if a:code == 0
		bwipeout!
	endif
endfunction
"}}}

"{{{ LazyGit floating window
" vim.reaper
function! ToggleLazyGit()
	call ToggleTerm('lazygit')
endfunction
"}}}

"{{{ NERDTree
let NERDTreeQuitOnOpen = 0
let NERDTreeShowLineNumbers = 1
let NERDTreeMinimalUI = 1

au bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

nnoremap <leader>nf :NERDTreeFind<CR>
nnoremap <leader>nt :NERDTreeToggle<CR>
"}}}

"{{{ IndentGuide (Prefer IndentLine)
" let g:indent_guides_auto_colors = 0
" let g:indent_guides_enable_on_vim_startup = 1
" let g:indent_guides_start_level=2
"}}}

"{{{ IndentLine
" let g:indentLine_color_gui = '#A4E57E'
let g:indentLine_char_list = ['|', '¦', '┆', '┊']
let g:indentLine_leadingSpaceEnabled = 1
let g:indentLine_leadingSpaceChar = '·'

" Bugfix for NERDTree
autocmd BufEnter NERD_tree* :LeadingSpaceDisable
"}}}

"{{{ TagBar
let g:tagbar_usearrows = 1
let g:tagbar_autofocus = 1
let g:tagbar_compact = 1
let g:tagbar_show_linenumbers = 3
let g:tagbar_autopreview = 0

"slow startup while opening heavy file
"au FileType c,cpp,vim,java,php,js nested :TagbarOpen
nnoremap <leader>tt :TagbarToggle<CR>
"}}}

"{{{ Navigation
"{{{ Buffer
nnoremap <leader>bn :bnext<cr>
"Buffkill plugin maps <leader>bd
"nnoremap <leader>bp :bd<cr>
nnoremap <leader>bp :bprev<cr>
"}}}
"{{{ Tabs
nnoremap <leader>tc :tabnew <cr>
nnoremap <leader>tn :tabnext<cr>
nnoremap <leader>td :tabclose<cr>
nnoremap <leader>tp :tabprev<cr>
"}}}
"}}}

"{{{ FZF
let $FZF_DEFAULT_OPTS='--layout=reverse'

let g:fzf_layout = {'window': 'call CreateCenteredFloatingWindow()'}
"}}}

"{{{ xclip
if !exists("*CustomXClipCall")
	function CustomXClipCall() range
		echo system('echo '.shellescape(join(getline(a:firstline, a:lastline), "\r")).' | xclip -sel clip')
	endfunction
	com -range=% -nargs=0 CustomXClipCall :<line1>,<line2>call CustomXClipCall()
	vnoremap <leader>qp :CustomXClipCall<cr>
endif
"}}}

"{{{ Documentation PDV
" let g:pdv_template_dir = $HOME."/.vim/bundle/pdv/templates"
let g:pdv_template_dir = $HOME."/.vim/pdv_templates"
nnoremap <buffer> <leader>dx :call pdv#DocumentCurrentLine()<CR>
"}}}

"{{{ PHPComplete
" let g:phpcomplete_mappings = {
"    \ 'jump_to_def': '<C-W><C-\>',
"    \ 'jump_to_def_split': '<C-]>',
"    \ 'jump_to_def_vsplit': '<C-W><C-]>',
"    \ 'jump_to_def_tabnew': '<C-W><C-[>',
"    \}
"}}}

"{{{ FileType
"{{{ ft PHP
let php_htmlInStrings=1
let php_baselib=1
" Causes bad indents on try catch and switch
" let php_folding=1
let php_folding=0
let g:PHP_vintage_case_default_indent=1
" au FileType php setl ofu=phpcomplete#CompletePHP
au FileType php set shiftwidth=4 tabstop=4 expandtab
"}}}
"{{{ ft Python
au FileType python set tabstop=8 expandtab shiftwidth=4 softtabstop=4
"}}}
"{{{ ft YAML
au FileType yaml set tabstop=2 expandtab shiftwidth=2 softtabstop=2
"}}}
"{{{ ft Terraform
au FileType tf set tabstop=2 expandtab shiftwidth=2 softtabstop=2
"}}}
"{{{ ft HTML,CSS,JS,XML,less,json,md
au FileType html,css,javascript,xml,less,json,markdown set tabstop=2 shiftwidth=2 expandtab
"}}}
"}}}

"{{{ EnhancedCommentify
let g:EnhCommentifyMultiPartBlocks = 'yes'
let g:EnhCommentifyIgnoreWS = 'no'
let g:EnhCommentifyPretty = 'yes'
let g:EnhCommentifyUseSyntax = 'yes'
"}}}

"{{{ Deoplete
let g:deoplete#enable_at_startup = 1
" disable all abbrev
call deoplete#custom#source('_', 'converters',
\ ['converter_remove_overlap', 'converter_truncate_abbr'])

"{{{ Go
call deoplete#custom#option('omni_patterns', { 'go': '[^. *\t]\.\w*' })
"}}}
"{{{ Python
let g:deoplete#sources#jedi#show_docstring = 1
let g:deoplete#sources#jedi#ignore_errors = v:true
"}}}
"}}}

"{{{ ALE
let g:ale_completion_enabled = 1
let g:ale_linters = {
\   'php': ['php', 'phpcs', 'phpmd']
\}
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'php': ['php_cs_fixer'],
\   'go': ['gofmt'],
\}
let g:ale_sign_error = ''
let g:ale_sign_warning = ''
let g:ale_list_window_size = 5
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
nmap <silent> <leader>ap <Plug>(ale_previous_wrap)
nmap <silent> <leader>an <Plug>(ale_next_wrap)
nmap <silent> <leader>ad <Plug>(ale_detail)
"}}}

"{{{ Neosnippets and vim-snippets
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#enable_completed_snippet = 1
" let g:neosnippet#enable_complete_done = 1
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
"}}}

"{{{ Startify
let g:startify_custom_header = ''
"}}}

"{{{ Rainbow
let g:rainbow_active = 1
"}}}

"{{{ vimwiki
let g:vimwiki_list = [{'path': '~/.vim/vimwiki/'}]
"}}}
" vim:ft=vim:fdm=marker
