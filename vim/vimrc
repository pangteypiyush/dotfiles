"{{{ Core
set encoding=utf-8
set laststatus=2
set nocompatible
"set clipboard=unnamedplus

set colorcolumn=81
set termguicolors

set tabstop=4
set shiftwidth=4
set sts=4
set smarttab
set autoindent

set showmatch
set splitbelow
set showcmd
set ruler
set cursorline

set incsearch
set hlsearch
set ignorecase
set smartcase

set noswapfile
set nobackup
set nowritebackup
set autoread
"allow buffer change even if changes were made
set hidden

set omnifunc=syntaxcomplete#Complete
set completeopt=longest,menuone,preview
filetype indent on
filetype plugin on
syntax enable

set foldcolumn=0
"set foldlevelstart=1
set foldmethod=syntax
set nofoldenable
au Syntax * normal zR

set mouse=a

"Toggle <PASTE> mode
set pastetoggle=<F2>
"}}}

"{{{ Misc
"{{{ Insert timestamp
nnoremap <F5> "=strftime("%c")<CR>P
"}}}
"{{{ Clear last search string
nnoremap <leader>cl :let @/=""<cr>
"}}}
"{{{ Fix for lxterminal(nvim)
set guicursor=
"}}}
"}}}

"{{{ Netrw Explorer (Prefer NERDTree)
let g:netrw_banner = 0
let g:netrw_browse_split = 3
let g:netrw_hide = 1
let g:netrw_winsize = 20
"map <c-w>o :Vexplore ~<cr>
"map <c-w>p :Vexplore<cr>
"}}}

"{{{ Hybrid Line numbering
set number relativenumber
augroup numbertoggle
  au!
  au BufEnter,FocusGained,InsertLeave * set relativenumber
  au BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END
"}}}

"{{{ Vundle
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
"{{{ Core Plugins
Plugin 'VundleVim/Vundle.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'bling/vim-bufferline'
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-fugitive'
Plugin 'majutsushi/tagbar'
Plugin 'scrooloose/nerdtree'

" VCS
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'vim-scripts/git_patch_tags.vim'
Plugin 'kablamo/vim-git-log'

" Indent
" Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'Yggdroot/indentLine'

Plugin 'qpkorr/vim-bufkill'
Plugin 'tpope/vim-surround'

" Autoclose
" Plugin 'jiangmiao/auto-pairs'
Plugin 'cohama/lexima.vim'

" Comment
Plugin 'vim-scripts/EnhCommentify.vim'

" Colorscheme
Plugin 'morhetz/gruvbox'
"}}}
"{{{ Extra Plugins
" Completion
Plugin 'Shougo/deoplete.nvim'

" Lint and  Fix
Plugin 'w0rp/ale'

" Misc
Plugin 'junegunn/vim-easy-align'
Plugin 'easymotion/vim-easymotion'
Plugin 'vimwiki/vimwiki'
Plugin 'junegunn/fzf.vim'
Plugin 'mhinz/vim-startify'

" Snippets
Plugin 'Shougo/neosnippet.vim'
Plugin 'honza/vim-snippets'

" Project management
Plugin 'Workspace-Manager'
"}}}
"{{{ PHP
" Documentation
Plugin 'tobyS/vmustache'
Plugin 'tobyS/pdv'

" Filetype
Plugin 'StanAngeloff/php.vim'
" Plugin 'rayburgemeestre/phpfolding.vim'

" Completion
Plugin 'lvht/phpcd.vim'
"}}}
"{{{ Go
" Completion
Plugin 'deoplete-plugins/deoplete-go'
"}}}
"{{{ CSS LESS
" Filetype
Plugin 'groenewege/vim-less'
Plugin 'hail2u/vim-css3-syntax'
"}}}
call vundle#end()
"}}}

"{{{ Colorscheme
let g:gruvbox_contrast_dark='hard'
colorscheme gruvbox
"}}}

"{{{ Airline
let g:airline_powerline_fonts=1
let g:airline_theme='gruvbox'
let g:airline#extensions#tagbar#enabled=1
let g:airline#extensions#branch#enabled=1
let g:airline#extensions#hunks#enabled=1
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#show_buffers=1
let g:airline#extensions#bufferline#enabled=1
let g:airline#extensions#whitespace#enabled=1
" let g:airline#extensions#whitespace#enabled=0
if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_symbols.branch = ''
let g:airline_symbols.maxlinenr = ''
"}}}

"{{{ GitGutter
"Alway show signcolumn
"set signcolumn=yes
" Effects single line :map results output
" Unset events for gitgutter from ~/.vim/after/plugin/gitgutter.vim
" and use buffer write for recalculating hunks
" set updatetime=500

"Reload hunks on buffer write
au BufWritePost * GitGutter

nmap <leader>hs <Plug>GitGutterStageHunk
nmap <leader>hr <Plug>GitGutterUndoHunk
nmap <leader>hv <Plug>GitGutterPreviewHunk
nmap <leader>hn <Plug>GitGutterNextHunk
nmap <leader>hp <Plug>GitGutterPrevHunk
"}}}

"{{{ NERDTree
let NERDTreeQuitOnOpen = 0
let NERDTreeShowLineNumbers = 1
let NERDTreeMinimalUI = 1

au bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

nnoremap <leader>nf :NERDTreeFind<CR>
nnoremap <leader>nt :NERDTreeToggle<CR>
"}}}

"{{{ IndentGuide (Prefer IndentLine)
" let g:indent_guides_auto_colors = 0
" let g:indent_guides_enable_on_vim_startup = 1
" let g:indent_guides_start_level=2
"}}}

"{{{ IndentLine
" let g:indentLine_color_gui = '#A4E57E'
let g:indentLine_char_list = ['|', '¦', '┆', '┊']
let g:indentLine_leadingSpaceEnabled = 1
let g:indentLine_leadingSpaceChar = '·'
"}}}

"{{{ TagBar
let g:tagbar_usearrows = 1
let g:tagbar_autofocus = 1
let g:tagbar_compact = 1
let g:tagbar_show_linenumbers = 3
let g:tagbar_autopreview = 0

"slow startup while opening heavy file
"au FileType c,cpp,vim,java,php,js nested :TagbarOpen

nnoremap <leader>tt :TagbarToggle<CR>
"}}}

"{{{ Navigation
"{{{ Buffer
nnoremap <leader>bn :bnext<cr>
"Buffkill plugin maps <leader>bd
"nnoremap <leader>bp :bd<cr>
nnoremap <leader>bp :bprev<cr>
"}}}
"{{{ Tabs
nnoremap <leader>tc :tabnew <cr>
nnoremap <leader>tn :tabnext<cr>
nnoremap <leader>td :tabclose<cr>
nnoremap <leader>tp :tabprev<cr>
"}}}
"}}}

"{{{ xclip
if !exists("*CustomXClipCall")
    function CustomXClipCall() range
      echo system('echo '.shellescape(join(getline(a:firstline, a:lastline), "\r")).' | xclip -sel clip')
    endfunction
    com -range=% -nargs=0 CustomXClipCall :<line1>,<line2>call CustomXClipCall()
    vnoremap <leader>qp :CustomXClipCall<cr>
endif
"}}}

"{{{ Documentation PDV
" let g:pdv_template_dir = $HOME."/.vim/bundle/pdv/templates"
let g:pdv_template_dir = $HOME."/.vim/pdv_templates"
nnoremap <buffer> <leader>dx :call pdv#DocumentCurrentLine()<CR>
"}}}

"{{{ PHPComplete
" let g:phpcomplete_mappings = {
"    \ 'jump_to_def': '<C-W><C-\>',
"    \ 'jump_to_def_split': '<C-]>',
"    \ 'jump_to_def_vsplit': '<C-W><C-]>',
"    \ 'jump_to_def_tabnew': '<C-W><C-[>',
"    \}
"}}}

"{{{ FileType
"{{{ ft PHP
let php_htmlInStrings=1
let php_baselib=1
let php_folding=1
let g:PHP_vintage_case_default_indent=1
" au FileType php setl ofu=phpcomplete#CompletePHP
au FileType php set shiftwidth=4 tabstop=4 expandtab
"}}}
"{{{ ft HTML,CSS,JS,XML,less
au FileType html,css,javascript,xml,less,json set tabstop=2 shiftwidth=2 expandtab
"}}}
"}}}

"{{{ EnhancedCommentify
let g:EnhCommentifyMultiPartBlocks = 'yes'
let g:EnhCommentifyIgnoreWS = 'no'
let g:EnhCommentifyPretty = 'yes'
let g:EnhCommentifyUseSyntax = 'yes'
"}}}

"{{{ Deoplete
let g:deoplete#enable_at_startup = 1
let g:deoplete#ignore_sources = get(g:, 'deoplete#ignore_sources', {})
let g:deoplete#ignore_sources.php = ['omni']
"}}}
"{{{ Go
let g:deoplete#ignore_sources.go = ['omni']
let g:deoplete#sources#go#gocode_binary = $HOME.'/go/bin/gocode'
let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
"}}}
"}}}

"{{{ ALE
let g:ale_completion_enabled = 1
autocmd BufNewFile,BufRead /opt/srv/vhosts/migrate/* let g:ale_php_phpmd_ruleset="/opt/srv/vhosts/migrate/dev/tests/static/testsuite/Magento/Test/Php/_files/phpmd/ruleset.xml"
let g:ale_linters = {
\   'php': ['php', 'phpcs', 'phpmd']
\}
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'php': ['php_cs_fixer'],
\}
let g:ale_sign_error = ''
let g:ale_sign_warning = ''
let g:ale_list_window_size = 5
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
nmap <silent> <leader>ap <Plug>(ale_previous_wrap)
nmap <silent> <leader>an <Plug>(ale_next_wrap)
nmap <silent> <leader>ad <Plug>(ale_detail)
"}}}

"{{{ Neosnippets and vim-snippets
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#enable_completed_snippet = 1
let g:neosnippet#enable_complete_done = 1
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
"}}}

"{{{ Startify
let g:startify_custom_header = ''
"}}}

" vim:ft=vim:fdm=marker
