#!/bin/bash

#{{{ Lib
set -o errexit

[[ ! -t 1 ]] && __colors= || __colors=true
[[ ! -t 2 ]] && __errcolors= || __errcolors=true
command -V logger &>/dev/null && __syslog=true || __syslog=

__script="`basename $0`"
__runtime="`date +%s`"

function ERROR {
	if [ ! -z "$@" ]; then
		[[ $__syslog ]] && logger -d -p err "$__script [$__runtime]: Error: $*" || true
		[[ $__errcolors ]] && \
			echo -e >&2 "\e[31;1m:: Error:\e[0m $@" || \
			echo -e >&2 ":: Error: $@"
	fi
	exit 1
}

function WARN {
	if [ ! -z "$@" ]; then
		[[ $__syslog ]] && logger -d -p warning "$__script [$__runtime]: $*" || true
		[[ $__errcolors ]] && \
			echo -e >&2 "\e[33;1m:: Warning:\e[0m $@" || \
			echo -e >&2 ":: Warning: $@"
	fi
}

function NOTICE {
	if [ ! -z "$@" ]; then
		[[ $__syslog ]] && logger -d -p notice "$__script [$__runtime]: $*" || true
		[[ $__colors ]] && \
			echo -e "\e[32;1m:: \e[0;1m$@\e[0m" || \
			echo -e ":: $@"
	fi
}

function INFO {
	if [ ! -z "$*" ] && [[ $__verbose ]]; then
		[[ $__syslog ]] && logger -d -p info "$__script [$__runtime]: $*" || true
		[[ $__colors ]] && \
			echo -e >&2 "\e[34;1m=>\e[0m $*" || \
			echo -e >&2 "=> $*"
	fi
}

function DEBUG {
	if [ ! -z "$*" ] && [[ $__verbose == 2 ]]; then
		[[ $__syslog ]] && logger -d -p debug "$__script [$__runtime]: $*" || true
		[[ $__colors ]] && \
			echo -e >&2 "\e[35;1m-> \e[0;2m$*\e[0m" || \
			echo -e >&2 "-> $*"
	fi
}

function usage {
	NOTICE "Usage: $__script [options] source destination"
	cat <<-EOF

	Options
	 -h                  help
	 -i                  install kindlegen binary
	 -v,-vv              increase verbosity
	EOF
}

function verbose {
	[ $__verbose ] && __verbose=2 || __verbose=1
}

# load_env [env file path]
# or set path in ENV_FILE
function load_env {
	local __env=${@:-$ENV_FILE}
	[ -z "$__env" ] && WARN "Tried to load env file but the path is not set"
	if [ -f "$__env" ]; then
		source "$__env" && DEBUG "Loaded env: $__env" || ERROR "Failed to load env: $__env"
	fi
}

# prompt "Query" "Expect"
function prompt {
	[[ $DO_IGNORE_PROMPT ]] && return
	[ $# -ne 2 ] && ERROR "Bad params for prompt"
	while true; do
		[[ $__colors ]] && \
			echo -ne "\e[32m::\e[0m $1: " || \
			echo -ne ":: $1: "
		read __response
		[ -z "$__response" ] && continue
		[ "$__response" == "$2" ] && return 0 || ERROR "Cannot proceed without invalid validation."
	done
}

# prompt_yn "Query"
function prompt_yn {
	[[ $DO_IGNORE_PROMPT ]] && return
	[ -z "$1" ] && ERROR "Bad params for prompt_yn"
	[[ $__colors ]] && \
		echo -ne "\e[32m::\e[0m $1 (y/N): " || \
		echo -ne ":: $1 (y/N): "
	read __response
	case "$__response" in
		y|Y ) return 0 ;;
		* ) return 1 ;;
	esac
}

function mkdir_if_not_exist {
	[ -z "$@" ] && return
	INFO "Checking if dir '$@' exists ..."
	if [ ! -d "$@" ]; then
		NOTICE "Path $@ does not exists. No problem we are creating it."
		mkdir -p "$@"
	fi
}

function need_root {
	INFO "Checking if script is being run by root."
	if [ $EUID -ne "0" ]; then
		ERROR "This script must be run as root!"
	fi
}

function check_kindlegen {
	INFO "Checking for kindlegen ..."
	if ! command -V kindlegen &>/dev/null; then
		WARN "No kindlegen found"
		install_kindlegen
	fi
	DEBUG "kindlegen is installed: `which kindlegen`"
}

function install_kindlegen {
	[ ! $DO_KINDLEGEN_INSTALL ] && return 1
	[ ! -w /usr/local/bin ] && need_root
	local kindlegen_url=https://github.com/koenrh/docker-kindlegen/blob/master/kindlegen/kindlegen_linux_2.6_i386_v2_9.tar.gz?raw=true
	local tmp=`mktemp -u "/var/tmp/kindlegen-XXX.tar.gz"`
	DEBUG "kindlegen will be downloaded to: $tmp"
	NOTICE "Downloading kindlegen ..."
	curl -sfLo "$tmp" "$kindlegen_url" || { WARN "Failed to download $kindlegen_url"; return 1; }
	tar -xf "$tmp" -C /usr/local/bin kindlegen || ERROR "Failed to install kindlegen"
	DEBUG "cleaning up ..."
	rm "$tmp"
	NOTICE "kindlegen successfully installed"
}
#}}}

#{{{ Parse Arguments
while getopts ":hniv" option; do
	case $option in
		h) usage; exit ;;
		n) DO_DRYRUN=true ;;
		i) DO_KINDLEGEN_INSTALL=true ;;
		v) verbose ;;
		'?') usage; ERROR "Unknown option '-$OPTARG'" ;;
		':') usage; ERROR "Missing parameter for '-$OPTARG'" ;;
	esac
done
shift $(($OPTIND - 1 ))
[ -n "$1" ] && SRCDIR="$1"
[ -n "$2" ] && TARGETDIR="$2"
#}}}

SRCDIR="${SRCDIR:-$PWD}"
TARGETDIR="${TARGETDIR:-$SRCDIR/mobi}"

#{{{ Checks
[ $DO_DRYRUN ] && WARN "Dry run mode is active"
check_kindlegen

DEBUG "Checking source dir: $SRCDIR"
[ ! -d "$SRCDIR" ] && ERROR "Source directory '$SRCDIR' doesnt exist"

DEBUG "Checking for epub files ..."
[ -z "`find "$SRCDIR" -maxdepth 1 -name '*.epub'`" ] && ERROR "No epub files found"

DEBUG "Checking target dir: $TARGETDIR"
if [ ! $DO_DRYRUN ]; then
	mkdir_if_not_exist "$TARGETDIR"
	[ ! -w "$TARGETDIR" ] && WARN "Cannot write in dir: $TARGETDIR" && need_root
fi
#}}}

#{{{ main
INFO "Starting conversion ..."
for epubfile in "$SRCDIR/"*.epub; do
	srcfile=`basename "$epubfile"`
	targetfile="${srcfile%%.epub}.mobi"
	INFO "Source file: $srcfile"

	DEBUG "Checking if the file is already converted ..."
	[ -f "$TARGETDIR/$targetfile" ] && \
		NOTICE "skipping: $srcfile" && \
		continue
	if [ -f "$SRCDIR/$targetfile" ]; then
		WARN "converted file found in source directory: $SRCDIR/$targetfile"
		if prompt_yn "move file to target directory ?"; then
			[ ! $DO_DRYRUN ] && mv "$SRCDIR/$targetfile" "$TARGETDIR/"
			INFO "moved converted file: $srcfile" && continue
		fi
		continue
	fi
	NOTICE "Converting: $srcfile ..."
	if [ ! $DO_DRYRUN ]; then
		kindlegen "$epubfile" -c2 -o "$targetfile" &>/dev/null || true
		[ ! -f "$SRCDIR/$targetfile" ] && ERROR "Failed to convert $targetfile"
		mv "$SRCDIR/$targetfile" "$TARGETDIR/"
	fi
	NOTICE "successfully converted: $srcfile"
done
#}}}

# vim:ft=sh:fdm=marker
